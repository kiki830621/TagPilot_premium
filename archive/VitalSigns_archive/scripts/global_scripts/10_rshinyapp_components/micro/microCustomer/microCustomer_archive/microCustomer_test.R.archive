# microCustomer Module Test Script
# Follows MP51 (Test Data Design) and R74 (Shiny Test Data)
# 
# This script tests the microCustomer module with standardized test data
# and implements proper validation patterns

library(shiny)
library(bs4Dash)
library(dplyr)
library(testthat) # For explicit test assertions

# Source the microCustomer module (assumes we're in the module directory)
source("microCustomer.R")

#' Standard customer test data block
#' 
#' Creates standardized test data following R74 (Shiny Test Data)
#' @param n_customers Number of customers to include
#' @param dna_coverage_pct Percentage of customers with DNA data
#' @param include_edge_cases Whether to include edge cases
#' @return List containing test dataframes with metadata
customer_test_block <- function(n_customers = 5, 
                               dna_coverage_pct = 60,
                               include_edge_cases = TRUE) {
  # Generate basic customer data (always complete)
  customers <- data.frame(
    customer_id = 1000 + seq_len(n_customers),
    buyer_name = paste("Customer", seq_len(n_customers)),
    email = paste0("customer", seq_len(n_customers), "@example.com"),
    registration_date = Sys.Date() - (n_customers:1) * 30,
    stringsAsFactors = FALSE
  )
  
  # Calculate how many customers have DNA data
  n_with_dna <- ceiling(n_customers * dna_coverage_pct / 100)
  
  # Define standard label values
  r_labels <- c("極近", "近期", "一般", "久遠", "非常久遠")
  f_labels <- c("極低", "低", "一般", "高", "非常高")
  m_labels <- c("極低", "低", "一般", "高", "非常高")
  cai_labels <- c("不活躍", "低度活躍", "一般活躍", "活躍", "非常活躍")
  nes_statuses <- c("新客型", "成長型", "主力型", "沉睡型", "流失型")
  
  # Customer DNA data (intentionally partial)
  customer_dna <- data.frame(
    customer_id = 1000 + seq_len(n_with_dna),
    time_first = Sys.Date() - sample(30:1000, n_with_dna, replace = TRUE),
    time_first_to_now = sample(30:1000, n_with_dna, replace = TRUE),
    r_label = sample(r_labels, n_with_dna, replace = TRUE),
    r_value = sample(1:120, n_with_dna, replace = TRUE),
    f_label = sample(f_labels, n_with_dna, replace = TRUE),
    f_value = sample(1:20, n_with_dna, replace = TRUE),
    m_label = sample(m_labels, n_with_dna, replace = TRUE),
    m_value = sample(seq(100, 20000, by = 100), n_with_dna, replace = TRUE),
    cai_label = sample(cai_labels, n_with_dna, replace = TRUE),
    cai = round(runif(n_with_dna, 0.1, 0.95), 2),
    ipt_mean = round(runif(n_with_dna, 10, 150), 1),
    pcv = sample(seq(1000, 200000, by = 1000), n_with_dna, replace = TRUE),
    clv = sample(seq(5000, 300000, by = 1000), n_with_dna, replace = TRUE),
    cri = round(runif(n_with_dna, 0.1, 0.95), 2),
    nrec = round(runif(n_with_dna, 0.1, 0.95), 2),
    nes_status = sample(nes_statuses, n_with_dna, replace = TRUE),
    nt = sample(seq(100, 3000, by = 100), n_with_dna, replace = TRUE),
    e0t = sample(seq(500, 5000, by = 100), n_with_dna, replace = TRUE),
    stringsAsFactors = FALSE
  )
  
  # Add edge cases if requested
  if (include_edge_cases && n_with_dna > 1) {
    # Edge case 1: Customer with extreme high values
    customer_dna[1, "r_value"] <- 1
    customer_dna[1, "r_label"] <- "極近"
    customer_dna[1, "f_value"] <- 20
    customer_dna[1, "f_label"] <- "非常高"
    customer_dna[1, "m_value"] <- 20000
    customer_dna[1, "m_label"] <- "非常高"
    customer_dna[1, "cai"] <- 0.95
    customer_dna[1, "cai_label"] <- "非常活躍"
    customer_dna[1, "nes_status"] <- "主力型"
    
    # Edge case 2: Customer with low values
    customer_dna[2, "r_value"] <- 120
    customer_dna[2, "r_label"] <- "非常久遠"
    customer_dna[2, "f_value"] <- 1
    customer_dna[2, "f_label"] <- "極低"
    customer_dna[2, "m_value"] <- 100
    customer_dna[2, "m_label"] <- "極低"
    customer_dna[2, "cai"] <- 0.1
    customer_dna[2, "cai_label"] <- "不活躍"
    customer_dna[2, "nes_status"] <- "沉睡型"
  }
  
  return(list(
    # Main test data
    df_customer_profile = customers,
    df_dna_by_customer = customer_dna,
    
    # Derived test scenarios
    scenarios = list(
      # Empty data scenario
      empty = list(
        df_customer_profile = NULL,
        df_dna_by_customer = NULL
      ),
      
      # Incomplete data scenario (missing DNA for some customers)
      incomplete = list(
        df_customer_profile = customers,
        df_dna_by_customer = customer_dna[1:(n_with_dna %/% 2),]
      )
    ),
    
    # Metadata about this test block
    metadata = list(
      description = "Standard customer test data for microCustomer module",
      customer_count = n_customers,
      dna_coverage_pct = dna_coverage_pct,
      includes_edge_cases = include_edge_cases,
      key_relationship = "df_customer_profile (key = customer_id) is complete, df_dna_by_customer (key = customer_id) is partial"
    )
  ))
}

#' Create a test app for the microCustomer module
#' 
#' Creates a test app with standardized UI patterns and test data
#' @return Shiny app object
create_test_app <- function() {
  # Generate test data according to principles
  test_data <- customer_test_block(
    n_customers = 5,
    dna_coverage_pct = 60,
    include_edge_cases = TRUE
  )
  
  # Define UI
  ui <- fluidPage(
    title = "microCustomer Module Test",
    
    # CSS styles
    tags$head(
      tags$style(HTML("
        .test-control-panel {
          background-color: #f8f9fa;
          padding: 15px;
          margin-bottom: 20px;
          border-radius: 5px;
          border: 1px solid #dee2e6;
        }
        .test-header {
          margin-bottom: 20px;
          padding-bottom: 10px;
          border-bottom: 1px solid #dee2e6;
        }
        .test-section {
          border: 1px solid #dee2e6;
          border-radius: 5px;
          padding: 15px;
          margin-top: 20px;
        }
      "))
    ),
    
    # Test header
    div(class = "test-header",
        h1("microCustomer Module Test"),
        p("This test application validates the functionality and usability of the customer analysis module")
    ),
    
    # Test control panel
    div(class = "test-control-panel",
        fluidRow(
          column(12,
                 h3("Test Controls"),
                 selectInput("test_scenario", "Test Scenario:", 
                           choices = c(
                             "Complete Data" = "complete",
                             "Incomplete Data" = "incomplete",
                             "Empty Data" = "empty"
                           ),
                           selected = "complete"
                 ),
                 hr(),
                 checkboxInput("show_filter", "Show Filter Interface", value = TRUE),
                 checkboxInput("show_debug", "Show Debug Information", value = TRUE)
          )
        )
    ),
    
    # Test results area
    fluidRow(
      column(12,
             h3("Module Test Results"),
             conditionalPanel(
               condition = "input.show_filter == true",
               div(class = "test-section",
                   h4("Filter Component"),
                   microCustomerFilterUI("test_module")
               )
             ),
             div(class = "test-section",
                 h4("Customer Profile Component"),
                 microCustomerUI("test_module")
             )
      )
    ),
    
    # Debug information
    conditionalPanel(
      condition = "input.show_debug == true",
      fluidRow(
        column(12,
               div(class = "test-section",
                   h3("Debug Information"),
                   verbatimTextOutput("debug_info")
               )
        )
      )
    )
  )
  
  # Define server
  server <- function(input, output, session) {
    # Centralized data validation function
    validate_data <- function(data, required_fields = NULL, data_name = "Data") {
      if (is.null(data)) {
        message(data_name, " is NULL")
        return(FALSE)
      }
      
      if (!is.data.frame(data)) {
        message(data_name, " is not a data frame")
        return(FALSE)
      }
      
      if (nrow(data) == 0) {
        message(data_name, " has 0 rows")
        return(FALSE)
      }
      
      if (!is.null(required_fields) && !all(required_fields %in% colnames(data))) {
        missing_fields <- setdiff(required_fields, colnames(data))
        message(data_name, " is missing required fields: ", 
                paste(missing_fields, collapse = ", "))
        return(FALSE)
      }
      
      return(TRUE)
    }
    
    # Reactive data sources based on selected scenario
    current_data <- reactive({
      scenario <- input$test_scenario
      
      # Return appropriate data based on scenario
      if (scenario == "complete") {
        list(
          df_customer_profile = test_data$df_customer_profile,
          df_dna_by_customer = test_data$df_dna_by_customer
        )
      } else if (scenario == "incomplete") {
        test_data$scenarios$incomplete
      } else {
        test_data$scenarios$empty
      }
    })
    
    # Set up test observers
    observe({
      # Test data validation
      profile_valid <- validate_data(
        current_data()$df_customer_profile, 
        c("customer_id", "buyer_name", "email"),
        "Customer profile"
      )
      
      dna_valid <- validate_data(
        current_data()$df_dna_by_customer,
        "customer_id",
        "DNA data"
      )
      
      # Log validation results for debugging
      cat("Data validation results:\n")
      cat("- Profile data valid:", profile_valid, "\n")
      cat("- DNA data valid:", dna_valid, "\n")
    })
    
    # Initialize the module with current data
    filtered_data <- microCustomerServer(
      "test_module", 
      current_data()$df_dna_by_customer, 
      current_data()$df_customer_profile
    )
    
    # Debug output
    output$debug_info <- renderPrint({
      current <- current_data()
      
      list(
        test_scenario = input$test_scenario,
        profile_data = list(
          valid = validate_data(current$df_customer_profile),
          rows = if(validate_data(current$df_customer_profile)) nrow(current$df_customer_profile) else 0,
          columns = if(validate_data(current$df_customer_profile)) ncol(current$df_customer_profile) else 0
        ),
        dna_data = list(
          valid = validate_data(current$df_dna_by_customer),
          rows = if(validate_data(current$df_dna_by_customer)) nrow(current$df_dna_by_customer) else 0,
          columns = if(validate_data(current$df_dna_by_customer)) ncol(current$df_dna_by_customer) else 0
        ),
        filtered_data = list(
          valid = validate_data(filtered_data()),
          rows = if(validate_data(filtered_data())) nrow(filtered_data()) else 0
        ),
        module_metadata = test_data$metadata
      )
    })
  }
  
  # Create and return the Shiny app
  shinyApp(ui, server)
}

# Run test validations
validate_test_data <- function() {
  test_data <- customer_test_block()
  
  # Basic structure checks
  test_that("Test data structure follows R74", {
    expect_true("df_customer_profile" %in% names(test_data))
    expect_true("df_dna_by_customer" %in% names(test_data))
    expect_true("scenarios" %in% names(test_data))
    expect_true("metadata" %in% names(test_data))
  })
  
  # Data relationship checks
  test_that("Data relationships are maintained", {
    # Check that customers without DNA data exist
    customer_ids <- test_data$df_customer_profile$customer_id
    dna_customer_ids <- test_data$df_dna_by_customer$customer_id
    
    # There should be more customers than DNA records
    expect_true(length(customer_ids) >= length(dna_customer_ids))
    
    # All DNA customer IDs should be in the profiles
    expect_true(all(dna_customer_ids %in% customer_ids))
  })
  
  # Edge case checks
  test_that("Edge cases are included", {
    # First customer should be high value
    high_value_customer <- test_data$df_dna_by_customer[1,]
    expect_equal(high_value_customer$r_label, "極近")
    expect_equal(high_value_customer$f_label, "非常高")
    expect_equal(high_value_customer$m_label, "非常高")
    
    # Second customer should be low value
    low_value_customer <- test_data$df_dna_by_customer[2,]
    expect_equal(low_value_customer$r_label, "非常久遠")
    expect_equal(low_value_customer$f_label, "極低")
    expect_equal(low_value_customer$m_label, "極低")
  })
  
  message("All test data validations passed!")
}

# Run the validations and test app
validate_test_data()
create_test_app()