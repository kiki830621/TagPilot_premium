---
description: 
globs: 
alwaysApply: false
---
# Development Principles

## 代碼品質原則

### 1. 函數驗證
- 使用任何函數前都應該先用 `?` 或 `??` 確認該函數確實存在
- 詳細規則請參考 `r_function_validation.mdc`

### 2. 模組化設計
- 每個功能應該封裝在獨立的模組中
- 避免全域變數的濫用
- 使用明確的函數介面

### 3. 錯誤處理
- 使用適當的錯誤處理機制
- 提供有意義的錯誤訊息
- 考慮邊界條件和異常情況

### 4. 代碼可讀性
- 使用描述性的變數和函數名稱
- 添加適當的註釋
- 保持一致的代碼風格

## 專案特定原則

### Shiny 應用程式
- UI 和 Server 邏輯分離
- 使用反應式程式設計模式
- 模組化 UI 組件

### 資料處理
- 使用 DuckDB 進行資料操作
- 優先考慮記憶體效率
- 實施適當的資料驗證

### 檔案組織
- 遵循既定的目錄結構
- 使用描述性的檔案名稱
- 將相關功能分組到適當的目錄中
